version: "3.9"
services:
  signal-scanner-db:
    container_name: signal-scanner-db
    image: 192.168.0.62:8002/ioque/postgrespro:${COMMIT_TAG:-latest}
    ports:
      - "5432:5432"
    volumes:
      - signal-scanner-db:/var/lib/pgpro/std-15/data

  backend:
    container_name: backend
    image: 192.168.0.62:8002/ioque/backend:${COMMIT_TAG:-latest}
    ports:
      - "8080:8080"
    environment:
      DB_HOST: ${DOCKER_DB_HOST}
      DB_PORT: "5432"
      EXCHANGE_URL: ${DOCKER_EXCHANGE_URL} # https://iss.moex.com
      SPRING_PROFILES_ACTIVE: ${DOCKER_SPRING_PROFILES}
    healthcheck:
      test: wget --no-verbose --tries=1 --spider  http://localhost:8080/actuator/health || exit 1
      interval: 5s
      retries: 5
      start_period: 20s
      timeout: 10s
    depends_on:
      signal-scanner-db:
        condition: service_started
      kafka:
        condition: service_healthy

  frontend:
    container_name: frontend
    image: 192.168.0.62:8002/ioque/frontend:${COMMIT_TAG:-latest}
    environment:
      API_HOST: ${DOCKER_API_HOST}
      API_HTTP_MODE: ${DOCKER_API_HTTP_MODE}
    ports:
      - "4200:4200"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider  http://localhost:4200/ || exit 1
      interval: 5s
      retries: 5
      start_period: 20s
      timeout: 10s

  datasource:
    container_name: datasource
    image: 192.168.0.62:8002/ioque/datasource:${COMMIT_TAG:-latest}
    ports:
      - "8081:8081"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider  http://localhost:8081/actuator/health || exit 1
      interval: 5s
      retries: 5
      start_period: 20s
      timeout: 10s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-server:7.4.1
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    depends_on:
      - zookeeper

  kafka-init-topics:
    image: confluentinc/cp-kafka:7.4.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic commands --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic events --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic signal-scanner-business-log --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic signal-scanner-technical-log --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  kafbat-ui:
    container_name: kafbat-ui
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: 'true'
      KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: 'true'
    depends_on:
      - kafka

  opensearch:
    image: opensearchproject/opensearch:2.1.0
    container_name: opensearch
    environment:
      - discovery.type=single-node
      - plugins.security.ssl.http.enabled=false
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=Cz39qhr@WW
      - "OPENSEARCH_JAVA_OPTS=-Xms1024m -Xmx2048m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    ports:
      - "9200:9200"
      - "9600:9600"

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.1.0
    container_name: opensearch-dashboards
    ports:
      - "5601:5601"
    environment:
      I18N_LOCALE: "ru"
      OPENSEARCH_HOSTS: '["http://opensearch:9200"]'
    depends_on:
      - opensearch

  logstash:
    image: 192.168.0.62:8002/ioque/logstash:${COMMIT_TAG:-latest}
    container_name: logstash
    ports:
      - "5044:5044"
      - "5046:5046"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - opensearch

#  moex-datasource:
#    container_name: moex-datasource
#    image: 192.168.0.62:8002/ioque/moex-datasource:${COMMIT_TAG:-latest}
#    ports:
#      - "8082:8081"
#    healthcheck:
#      test: wget --no-verbose --tries=1 --spider  http://localhost:8081/actuator/health || exit 1
#      interval: 5s
#      retries: 5
#      start_period: 20s
#      timeout: 10s
volumes:
  signal-scanner-db:
    driver: local