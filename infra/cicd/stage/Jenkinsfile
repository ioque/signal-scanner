#!groovy
package stage

pipeline {
    agent none
    options {
        skipStagesAfterUnstable()
        skipDefaultCheckout()
    }
    environment {
        DOCKER_DB_HOST = "192.168.0.85"
        DOCKER_EXCHANGE_URL = "http://192.168.0.62:8081"
        DOCKER_SPRING_PROFILES = "test"
        DOCKER_API_HOST = "192.168.0.85"
        DOCKER_API_HTTP_MODE = "http"
        IMAGE_TAG = "v$BUILD_NUMBER"
        NEXUS_URL = "192.168.0.62:8002"
        NEXUS_CREDENTIALS = credentials('nexus-cred')
    }
    stages {
        stage('Git Checkout') {
            agent any
            steps {
                checkout scm
            }
        }

        stage("Unit Tests") {
            agent {
                docker {
                    image 'openjdk:17-jdk-alpine'
                }
            }
            steps {
                sh 'cd backend && ./gradlew test'
                junit '**/application/build/test-results/test/*.xml'
                junit '**/adapters/build/test-results/test/*.xml'
                echo "Running unit tests was successful."
            }
        }

        stage("Build and Push Docker Images") {
            parallel {
                stage("Backend") {
                    agent any
                    steps {
                        script {
                            sh "cd backend && docker build . --pull -t ${env.NEXUS_URL}/ioque/backend:${env.IMAGE_TAG} -t ${env.NEXUS_URL}/ioque/backend:latest"
                            sh "docker login ${env.NEXUS_CREDENTIALS} ${env.NEXUS_URL}"
                            sh "docker push --all-tags ${env.NEXUS_URL}/ioque/backend"
                            sh "docker rmi ${env.NEXUS_URL}/ioque/backend:latest"
                            sh "docker rmi ${env.NEXUS_URL}/ioque/backend:${env.IMAGE_TAG}"
                            sh "docker logout ${env.NEXUS_URL}"
                            echo "Docker image of Backend was successfully built and pushed to nexus."
                        }
                    }
                }
                stage("Postgres") {
                    agent any
                    steps {
                        script {
                            sh "cd infra && cd containers && cd postgres && docker build . --pull -t ${env.NEXUS_URL}/ioque/postgrespro:${env.IMAGE_TAG} -t ${env.NEXUS_URL}/ioque/postgrespro:latest"
                            sh "docker login ${env.NEXUS_CREDENTIALS} ${env.NEXUS_URL}"
                            sh "docker push --all-tags ${env.NEXUS_URL}/ioque/postgrespro"
                            sh "docker rmi ${env.NEXUS_URL}/ioque/postgrespro:latest"
                            sh "docker rmi ${env.NEXUS_URL}/ioque/postgrespro:${env.IMAGE_TAG}"
                            sh "docker logout ${env.NEXUS_URL}"
                            echo "Docker image of Postgres was successfully built and pushed to nexus."
                        }
                    }
                }
                stage("Frontend") {
                    agent any
                    steps {
                        script {
                            sh "cd frontend && docker build . --pull -t ${env.NEXUS_URL}/ioque/frontend:${env.IMAGE_TAG} -t ${env.NEXUS_URL}/ioque/frontend:latest"
                            sh "docker login ${env.NEXUS_CREDENTIALS} ${env.NEXUS_URL}"
                            sh "docker push --all-tags ${env.NEXUS_URL}/ioque/frontend"
                            sh "docker rmi ${env.NEXUS_URL}/ioque/frontend:latest"
                            sh "docker rmi ${env.NEXUS_URL}/ioque/frontend:${env.IMAGE_TAG}"
                            sh "docker logout ${env.NEXUS_URL}"
                            echo "Docker image of Frontend was successfully built and pushed to nexus."
                        }
                    }
                }
            }
        }

        stage("Deploy to Staging Server") {
            agent any
            steps {
                sh "export DOCKER_DB_HOST=${env.DOCKER_DB_HOST}"
                sh "export DOCKER_EXCHANGE_URL=${env.DOCKER_EXCHANGE_URL}"
                sh "export DOCKER_SPRING_PROFILES=${env.DOCKER_SPRING_PROFILES}"
                sh "export DOCKER_API_HOST=${env.DOCKER_API_HOST}"
                withCredentials([sshUserPrivateKey(credentialsId: 'ioque', keyFileVariable: 'PRIVATE')]) {
                    sh "cd infra/ansible && ansible-playbook -v playbooks/deploy.yml -l 'test' --private-key $PRIVATE"
                }
                echo "Deploy to Staging Server was successfully."
            }
        }

        stage("API Tests") {
            agent any
            steps {
                sh "export API_HOST=192.168.0.85"
                sh "cd acceptance && ./gradlew test"
                echo "Running API tests was successful."
            }
        }

        stage("UI Tests") {
            agent any
            steps {
                sh "export API_HOST=192.168.0.85"
                sh "export FRONTEND_HOST=192.168.0.85"
                sh "cd acceptance && ./gradlew boorRun --args='--spring.profiles.active=frontend'"
                sh "cd selenium && ./gradlew test"
                echo "Running UI tests was successful."
            }
        }
    }
}