#!groovy
pipeline {
    agent none
    options {
        skipStagesAfterUnstable()
        skipDefaultCheckout()
    }
    environment {
        IMAGE_TAG = "v$BUILD_NUMBER"
        REACT_APP_API_URL = "http://192.168.0.62:8080"
        NEXUS_URL = "127.0.0.1:8002"
        NEXUS_CREDENTIALS = credentials('nexus-cred')
    }
    stages {
        stage('Git Checkout') {
            agent any
            steps {
                checkout scm
            }
        }

        stage("Test") {
            stages {
                stage("Backend") {
                    agent {
                        docker {
                            image 'openjdk:17-jdk-alpine'
                        }
                    }
                    stages {
                        stage('Application Test') {
                            steps {
                                sh 'cd backend && ./gradlew :application:test'
                                junit '**/application/build/test-results/test/*.xml'
                            }
                        }
                        stage('Adapters Test') {
                            steps {
                                sh 'cd backend && ./gradlew :adapters:test'
                                junit '**/adapters/build/test-results/test/*.xml'
                            }
                        }
                    }
                }
            }
        }


        stage('Build and Push') {
            agent any
            when { branch 'master' }
            steps {
                script {
                    sh "cd frontend && docker build . --build-arg REACT_APP_API_URL=${env.REACT_APP_API_URL} -t ${env.NEXUS_URL}/ioque/frontend:${env.IMAGE_TAG}"
                    sh "cd backend && docker build . -t ${env.NEXUS_URL}/ioque/backend:${env.IMAGE_TAG}"
                    sh "docker login ${env.NEXUS_CREDENTIALS} ${env.NEXUS_URL}"
                    sh "docker push ${env.NEXUS_URL}/ioque/frontend:${env.IMAGE_TAG}"
                    sh "docker push ${env.NEXUS_URL}/ioque/backend:${env.IMAGE_TAG}"
                    sh "docker rmi ioque/frontend:${env.IMAGE_TAG}"
                    sh "docker rmi ioque/backend:${env.IMAGE_TAG}"
                    sh "docker logout ${env.NEXUS_URL}"
                }
            }
        }
    }
}